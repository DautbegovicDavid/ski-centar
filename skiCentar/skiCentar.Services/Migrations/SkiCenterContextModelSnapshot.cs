// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using skiCentar.Services.Database;

#nullable disable

namespace skiCentar.Services.Migrations
{
    [DbContext(typeof(SkiCenterContext))]
    partial class SkiCenterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserResort", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.HasKey("UserId", "ResortId")
                        .HasName("PK__user_res__D2DFBAD28F0E6CB8");

                    b.HasIndex(new[] { "ResortId" }, "IX_user_resort_resort_id");

                    b.ToTable("user_resort", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.DailyWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("humidity");

                    b.Property<decimal?>("Precipitation")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("precipitation");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.Property<decimal?>("SnowHeight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("snow_height");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("temperature");

                    b.Property<string>("WeatherCondition")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("weather_condition");

                    b.Property<decimal?>("WindSpeed")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id")
                        .HasName("PK__daily_we__3213E83F8DDADEE6");

                    b.HasIndex(new[] { "ResortId" }, "IX_daily_weather_resort_id");

                    b.ToTable("daily_weather", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(7066),
                            Humidity = 3m,
                            Precipitation = 0m,
                            ResortId = 2,
                            SnowHeight = 14m,
                            Temperature = -5m,
                            WeatherCondition = "ok",
                            WindSpeed = 10m
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(7072),
                            Humidity = 45m,
                            Precipitation = 10m,
                            ResortId = 1,
                            SnowHeight = 24m,
                            Temperature = 3m,
                            WeatherCondition = "not recommended for beginners",
                            WindSpeed = 3m
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.Lift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<bool?>("IsFunctional")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_functional")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LiftTypeId")
                        .HasColumnType("int")
                        .HasColumnName("lift_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state_machine");

                    b.HasKey("Id")
                        .HasName("PK__lift__3213E83F0CC826DF");

                    b.HasIndex(new[] { "LiftTypeId" }, "IX_lift_lift_type_id");

                    b.HasIndex(new[] { "ResortId" }, "IX_lift_resort_id");

                    b.ToTable("lift", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 6,
                            IsFunctional = true,
                            LiftTypeId = 1,
                            Name = "Ogorjelica",
                            ResortId = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            IsFunctional = true,
                            LiftTypeId = 3,
                            Name = "Poljice",
                            ResortId = 1,
                            StateMachine = "draft"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 2,
                            IsFunctional = true,
                            LiftTypeId = 3,
                            Name = "Babanovac",
                            ResortId = 2,
                            StateMachine = "draft"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LiftId")
                        .HasColumnType("int")
                        .HasColumnName("lift_id");

                    b.Property<decimal?>("LocationX")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_x");

                    b.Property<decimal?>("LocationY")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_y");

                    b.HasKey("Id")
                        .HasName("PK__lift_loc__3213E83F658B649E");

                    b.HasIndex(new[] { "LiftId" }, "IX_lift_location_lift_id");

                    b.ToTable("lift_location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LiftId = 1,
                            LocationX = 43.729465m,
                            LocationY = 18.565698m
                        },
                        new
                        {
                            Id = 2,
                            LiftId = 1,
                            LocationX = 43.732628m,
                            LocationY = 18.571362m
                        },
                        new
                        {
                            Id = 3,
                            LiftId = 2,
                            LocationX = 43.736905m,
                            LocationY = 18.566122m
                        },
                        new
                        {
                            Id = 4,
                            LiftId = 2,
                            LocationX = 43.732582m,
                            LocationY = 18.562523m
                        },
                        new
                        {
                            Id = 5,
                            LiftId = 3,
                            LocationX = 44.314474m,
                            LocationY = 17.573487m
                        },
                        new
                        {
                            Id = 6,
                            LiftId = 3,
                            LocationX = 44.311628m,
                            LocationY = 17.581339m
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("LiftId")
                        .HasColumnType("int")
                        .HasColumnName("lift_id");

                    b.Property<DateTime?>("MaintenanceEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("maintenance_end");

                    b.Property<DateTime?>("MaintenanceStart")
                        .HasColumnType("datetime")
                        .HasColumnName("maintenance_start");

                    b.HasKey("Id")
                        .HasName("PK__lift_mai__3213E83F1677EEE9");

                    b.HasIndex(new[] { "LiftId" }, "IX_lift_maintenance_lift_id");

                    b.ToTable("lift_maintenance", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__lift_typ__3213E83F09F8F725");

                    b.ToTable("lift_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sjedeznica"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gondola"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sidro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pokretna staza"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tanjir"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rukohvat"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.PoiCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__poi_cate__3213E83FDA520F22");

                    b.ToTable("poi_category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Info"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ski School"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ski Rent"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hotel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Medical"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Restaurant"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Coffee & Tea"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bar"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.PointOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("LocationX")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_x");

                    b.Property<decimal?>("LocationY")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_y");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.HasKey("Id")
                        .HasName("PK__point_of__3213E83FB040CD86");

                    b.HasIndex(new[] { "CategoryId" }, "IX_point_of_interest_category_id");

                    b.HasIndex(new[] { "ResortId" }, "IX_point_of_interest_resort_id");

                    b.ToTable("point_of_interest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Info and Tickets shop",
                            LocationX = 43.732600m,
                            LocationY = 18.565900m,
                            Name = "Informacije",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Ski School",
                            LocationX = 43.732700m,
                            LocationY = 18.566000m,
                            Name = "PRO SKI SCHOOL",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Ski rental",
                            LocationX = 43.732800m,
                            LocationY = 18.566100m,
                            Name = "Vucko SKI rent",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Hotel & Spa",
                            LocationX = 43.732900m,
                            LocationY = 18.566200m,
                            Name = "Hotel Vucko",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Medic & Apotecary 0-24",
                            LocationX = 43.733000m,
                            LocationY = 18.566300m,
                            Name = "Hitna",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "PARKING 0-24",
                            LocationX = 43.733100m,
                            LocationY = 18.566400m,
                            Name = "Parking",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Restaurant 1",
                            LocationX = 43.733200m,
                            LocationY = 18.566500m,
                            Name = "Restaurant 1",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Coffeee & Tea",
                            LocationX = 43.733300m,
                            LocationY = 18.566600m,
                            Name = "Cafe bar 1",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Bar",
                            LocationX = 43.733400m,
                            LocationY = 18.566700m,
                            Name = "Peggy",
                            ResortId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Info and Tickets shop",
                            LocationX = 44.302800m,
                            LocationY = 17.595000m,
                            Name = "Info Center Vlasic",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Description = "Ski School Vlasic",
                            LocationX = 44.302900m,
                            LocationY = 17.595100m,
                            Name = "Vlasic SKI SCHOOL",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Ski rental Vlasic",
                            LocationX = 44.303000m,
                            LocationY = 17.595200m,
                            Name = "Vlasic SKI rent",
                            ResortId = 2
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.Resort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Elevation")
                        .HasColumnType("int")
                        .HasColumnName("elevation");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("SkiWorkHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ski_work_hours");

                    b.HasKey("Id")
                        .HasName("PK__resort__3213E83F95FCDA33");

                    b.ToTable("resort", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Elevation = 2000,
                            Location = "Sarajevo",
                            Name = "Jahorina",
                            SkiWorkHours = "od 9 do 4"
                        },
                        new
                        {
                            Id = 2,
                            Elevation = 1500,
                            Location = "Travnik",
                            Name = "Vlasic",
                            SkiWorkHours = "9 AM - 5 PM"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.SkiAccident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsReporterInjured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_reporter_injured")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("LocationX")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_x");

                    b.Property<decimal>("LocationY")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_y");

                    b.Property<int?>("PeopleInvolved")
                        .HasColumnType("int")
                        .HasColumnName("people_involved");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("trail_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__ski_acci__3213E83FBC915BFB");

                    b.HasIndex(new[] { "TrailId" }, "IX_ski_accident_trail_id");

                    b.HasIndex(new[] { "UserId" }, "IX_ski_accident_user_id");

                    b.ToTable("ski_accident", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_type_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("PK__ticket__3213E83FADDC681A");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("StripePaymentIntentId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("stripe_payment_intent_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__ticket_p__3213E83FF58BF17D");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_purchase", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("FullDay")
                        .HasColumnType("bit")
                        .HasColumnName("full_day");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.Property<int?>("TicketTypeSeniorityId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_type_seniority_id");

                    b.HasKey("Id")
                        .HasName("PK__ticket_t__3213E83F8918DEA6");

                    b.HasIndex("ResortId");

                    b.HasIndex("TicketTypeSeniorityId");

                    b.ToTable("ticket_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullDay = true,
                            Price = 100m,
                            ResortId = 1,
                            TicketTypeSeniorityId = 2
                        },
                        new
                        {
                            Id = 2,
                            FullDay = false,
                            Price = 67m,
                            ResortId = 1,
                            TicketTypeSeniorityId = 2
                        },
                        new
                        {
                            Id = 3,
                            FullDay = true,
                            Price = 50m,
                            ResortId = 1,
                            TicketTypeSeniorityId = 1
                        },
                        new
                        {
                            Id = 4,
                            FullDay = false,
                            Price = 50m,
                            ResortId = 1,
                            TicketTypeSeniorityId = 1
                        },
                        new
                        {
                            Id = 5,
                            FullDay = true,
                            Price = 67m,
                            ResortId = 1,
                            TicketTypeSeniorityId = 3
                        },
                        new
                        {
                            Id = 6,
                            FullDay = true,
                            Price = 57m,
                            ResortId = 2,
                            TicketTypeSeniorityId = 2
                        },
                        new
                        {
                            Id = 7,
                            FullDay = false,
                            Price = 37m,
                            ResortId = 2,
                            TicketTypeSeniorityId = 2
                        },
                        new
                        {
                            Id = 8,
                            FullDay = true,
                            Price = 37m,
                            ResortId = 2,
                            TicketTypeSeniorityId = 1
                        },
                        new
                        {
                            Id = 9,
                            FullDay = true,
                            Price = 47m,
                            ResortId = 2,
                            TicketTypeSeniorityId = 3
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketTypeSeniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Seniority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("seniority");

                    b.HasKey("Id")
                        .HasName("PK__ticket_t__3213E83F6EE6FBB4");

                    b.ToTable("ticket_type_seniority", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Seniority = "Junior"
                        },
                        new
                        {
                            Id = 2,
                            Seniority = "Adult"
                        },
                        new
                        {
                            Id = 3,
                            Seniority = "Senior"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int")
                        .HasColumnName("difficulty_id");

                    b.Property<bool?>("IsFunctional")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_functional")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("resort_id");

                    b.HasKey("Id")
                        .HasName("PK__trail__3213E83FB5BAFCDF");

                    b.HasIndex(new[] { "DifficultyId" }, "IX_trail_difficulty_id");

                    b.HasIndex(new[] { "ResortId" }, "IX_trail_resort_id");

                    b.ToTable("trail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyId = 2,
                            IsFunctional = true,
                            Length = 357m,
                            Name = "Babanovac",
                            ResortId = 2
                        },
                        new
                        {
                            Id = 2,
                            DifficultyId = 3,
                            IsFunctional = true,
                            Length = 699m,
                            Name = "Poljice",
                            ResortId = 1
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__trail_di__3213E83F5DF5ADE9");

                    b.ToTable("trail_difficulty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Green",
                            Name = "Pocetnicke staza"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Blue",
                            Name = "Staze za srednje vjestine"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Crvena",
                            Name = "Napredne staza"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Black",
                            Name = "Ekspertne staze"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("LocationX")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_x");

                    b.Property<decimal?>("LocationY")
                        .HasColumnType("decimal(10, 6)")
                        .HasColumnName("location_y");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("trail_id");

                    b.HasKey("Id")
                        .HasName("PK__trail_lo__3213E83F2E8E656F");

                    b.HasIndex(new[] { "TrailId" }, "IX_trail_location_trail_id");

                    b.ToTable("trail_location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationX = 44.314662m,
                            LocationY = 17.573635m,
                            TrailId = 1
                        },
                        new
                        {
                            Id = 2,
                            LocationX = 44.313771m,
                            LocationY = 17.575462m,
                            TrailId = 1
                        },
                        new
                        {
                            Id = 3,
                            LocationX = 44.313441m,
                            LocationY = 17.578091m,
                            TrailId = 1
                        },
                        new
                        {
                            Id = 4,
                            LocationX = 44.312513m,
                            LocationY = 17.580054m,
                            TrailId = 1
                        },
                        new
                        {
                            Id = 5,
                            LocationX = 44.311523m,
                            LocationY = 17.580822m,
                            TrailId = 1
                        },
                        new
                        {
                            Id = 6,
                            LocationX = 43.736601m,
                            LocationY = 18.565749m,
                            TrailId = 2
                        },
                        new
                        {
                            Id = 7,
                            LocationX = 43.734914m,
                            LocationY = 18.564499m,
                            TrailId = 2
                        },
                        new
                        {
                            Id = 8,
                            LocationX = 43.733705m,
                            LocationY = 18.564546m,
                            TrailId = 2
                        },
                        new
                        {
                            Id = 9,
                            LocationX = 43.732563m,
                            LocationY = 18.562966m,
                            TrailId = 2
                        },
                        new
                        {
                            Id = 10,
                            LocationX = 43.732035m,
                            LocationY = 18.560514m,
                            TrailId = 2
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("MaintenanceEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("maintenance_end");

                    b.Property<DateTime?>("MaintenanceStart")
                        .HasColumnType("datetime")
                        .HasColumnName("maintenance_start");

                    b.Property<int?>("TrailId")
                        .HasColumnType("int")
                        .HasColumnName("trail_id");

                    b.HasKey("Id")
                        .HasName("PK__trail_ma__3213E83F335D1040");

                    b.HasIndex(new[] { "TrailId" }, "IX_trail_maintenance_trail_id");

                    b.ToTable("trail_maintenance", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_verified")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_id");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("PK__user__3213E83FDCF4DEF2");

                    b.HasIndex(new[] { "UserDetailsId" }, "IX_user_user_details_id");

                    b.HasIndex(new[] { "UserRoleId" }, "IX_user_user_role_id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "employee@email.com",
                            IsVerified = true,
                            LastLoginDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6826),
                            Password = "$2a$11$9gH.VB9K9HpmzPuSufzZD.f/LWqqqaXcO9TLn9NrzqQJa7XEZAlNG",
                            RegistrationDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6867),
                            UserRoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin@email.com",
                            IsVerified = true,
                            LastLoginDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6871),
                            Password = "$2a$11$9gH.VB9K9HpmzPuSufzZD.f/LWqqqaXcO9TLn9NrzqQJa7XEZAlNG",
                            RegistrationDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6873),
                            UserRoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@email.com",
                            IsVerified = true,
                            LastLoginDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6876),
                            Password = "$2a$11$9gH.VB9K9HpmzPuSufzZD.f/LWqqqaXcO9TLn9NrzqQJa7XEZAlNG",
                            RegistrationDate = new DateTime(2024, 8, 25, 15, 38, 39, 875, DateTimeKind.Local).AddTicks(6878),
                            UserRoleId = 3
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__user_det__3213E83F47A47460");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserPoiInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InteractionTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("interaction_timestamp");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("interaction_type");

                    b.Property<int>("PoiId")
                        .HasColumnType("int")
                        .HasColumnName("poi_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__user_poi_interaction__3213E83F8DDADEE6");

                    b.HasIndex(new[] { "PoiId" }, "IX_user_poi_interaction_poi_id");

                    b.HasIndex(new[] { "UserId" }, "IX_user_poi_interaction_user_id");

                    b.ToTable("user_poi_interaction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InteractionTimestamp = new DateTime(2024, 8, 25, 13, 38, 39, 875, DateTimeKind.Utc).AddTicks(6896),
                            InteractionType = "view",
                            PoiId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            InteractionTimestamp = new DateTime(2024, 8, 25, 13, 38, 39, 875, DateTimeKind.Utc).AddTicks(6897),
                            InteractionType = "view",
                            PoiId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__user_rol__3213E83FD6D48D1E");

                    b.ToTable("user_role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("verification_code");

                    b.HasKey("Id")
                        .HasName("PK__user_ver__3213E83DB5BAFCDC");

                    b.HasIndex(new[] { "UserId" }, "IX_user_verification_user_id");

                    b.ToTable("user_verification", (string)null);
                });

            modelBuilder.Entity("UserResort", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Resort", null)
                        .WithMany()
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("FK__user_reso__resor__4CA06362");

                    b.HasOne("skiCentar.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_reso__user___4BAC3F29");
                });

            modelBuilder.Entity("skiCentar.Services.Database.DailyWeather", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Resort", "Resort")
                        .WithMany("DailyWeathers")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__daily_wea__resor__267ABA7A");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Lift", b =>
                {
                    b.HasOne("skiCentar.Services.Database.LiftType", "LiftType")
                        .WithMany("Lifts")
                        .HasForeignKey("LiftTypeId")
                        .HasConstraintName("FK__lift__lift_type___34C8D9D1");

                    b.HasOne("skiCentar.Services.Database.Resort", "Resort")
                        .WithMany("Lifts")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__lift__resort_id__35BCFE0A");

                    b.Navigation("LiftType");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftLocation", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Lift", "Lift")
                        .WithMany("LiftLocations")
                        .HasForeignKey("LiftId")
                        .HasConstraintName("FK__lift_loca__lift___3C69FB99");

                    b.Navigation("Lift");
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftMaintenance", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Lift", "Lift")
                        .WithMany("LiftMaintenances")
                        .HasForeignKey("LiftId")
                        .HasConstraintName("FK__lift_main__lift___398D8EEE");

                    b.Navigation("Lift");
                });

            modelBuilder.Entity("skiCentar.Services.Database.PointOfInterest", b =>
                {
                    b.HasOne("skiCentar.Services.Database.PoiCategory", "Category")
                        .WithMany("PointOfInterests")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__point_of___categ__5165187F");

                    b.HasOne("skiCentar.Services.Database.Resort", "Resort")
                        .WithMany("PointOfInterests")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__point_of___resor__52593CB8");

                    b.Navigation("Category");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("skiCentar.Services.Database.SkiAccident", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Trail", "Trail")
                        .WithMany("SkiAccidents")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("FK__ski_accid__trail__5629CD9C");

                    b.HasOne("skiCentar.Services.Database.User", "User")
                        .WithMany("SkiAccidents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ski_accid__user___5535A963");

                    b.Navigation("Trail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Ticket", b =>
                {
                    b.HasOne("skiCentar.Services.Database.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__ticket__ticket_t__2B0A656D");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketPurchase", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Ticket", "Ticket")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK__ticket_pu__ticke__32AB8735");

                    b.HasOne("skiCentar.Services.Database.User", "User")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ticket_pu__user___31B762FC");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketType", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Resort", "Resort")
                        .WithMany("TicketTypes")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK_ticket_type_resort");

                    b.HasOne("skiCentar.Services.Database.TicketTypeSeniority", "TicketTypeSeniority")
                        .WithMany("TicketTypes")
                        .HasForeignKey("TicketTypeSeniorityId")
                        .HasConstraintName("FK_ticket_type_ticket_type_seniority");

                    b.Navigation("Resort");

                    b.Navigation("TicketTypeSeniority");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Trail", b =>
                {
                    b.HasOne("skiCentar.Services.Database.TrailDifficulty", "Difficulty")
                        .WithMany("Trails")
                        .HasForeignKey("DifficultyId")
                        .HasConstraintName("FK__trail__difficult__2B3F6F97");

                    b.HasOne("skiCentar.Services.Database.Resort", "Resort")
                        .WithMany("Trails")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__trail__resort_id__2C3393D0");

                    b.Navigation("Difficulty");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailLocation", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Trail", "Trail")
                        .WithMany("TrailLocations")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("FK__trail_loc__trail__3F466844");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailMaintenance", b =>
                {
                    b.HasOne("skiCentar.Services.Database.Trail", "Trail")
                        .WithMany("TrailMaintenances")
                        .HasForeignKey("TrailId")
                        .HasConstraintName("FK__trail_mai__trail__300424B4");

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("skiCentar.Services.Database.User", b =>
                {
                    b.HasOne("skiCentar.Services.Database.UserDetail", "UserDetails")
                        .WithMany("Users")
                        .HasForeignKey("UserDetailsId")
                        .HasConstraintName("FK__user__user_detai__48CFD27E");

                    b.HasOne("skiCentar.Services.Database.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK__user__user_role___47DBAE45");

                    b.Navigation("UserDetails");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserPoiInteraction", b =>
                {
                    b.HasOne("skiCentar.Services.Database.PointOfInterest", "PointOfInterest")
                        .WithMany("UserPoiInteractions")
                        .HasForeignKey("PoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_poi_interaction__poi_id__267ABA7A");

                    b.HasOne("skiCentar.Services.Database.User", "User")
                        .WithMany("UserPoiInteractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_poi_interaction__user_id__267ABA7A");

                    b.Navigation("PointOfInterest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserVerification", b =>
                {
                    b.HasOne("skiCentar.Services.Database.User", "User")
                        .WithMany("UserVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_ver__user_id__2C3393D0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Lift", b =>
                {
                    b.Navigation("LiftLocations");

                    b.Navigation("LiftMaintenances");
                });

            modelBuilder.Entity("skiCentar.Services.Database.LiftType", b =>
                {
                    b.Navigation("Lifts");
                });

            modelBuilder.Entity("skiCentar.Services.Database.PoiCategory", b =>
                {
                    b.Navigation("PointOfInterests");
                });

            modelBuilder.Entity("skiCentar.Services.Database.PointOfInterest", b =>
                {
                    b.Navigation("UserPoiInteractions");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Resort", b =>
                {
                    b.Navigation("DailyWeathers");

                    b.Navigation("Lifts");

                    b.Navigation("PointOfInterests");

                    b.Navigation("TicketTypes");

                    b.Navigation("Trails");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Ticket", b =>
                {
                    b.Navigation("TicketPurchases");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TicketTypeSeniority", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("skiCentar.Services.Database.Trail", b =>
                {
                    b.Navigation("SkiAccidents");

                    b.Navigation("TrailLocations");

                    b.Navigation("TrailMaintenances");
                });

            modelBuilder.Entity("skiCentar.Services.Database.TrailDifficulty", b =>
                {
                    b.Navigation("Trails");
                });

            modelBuilder.Entity("skiCentar.Services.Database.User", b =>
                {
                    b.Navigation("SkiAccidents");

                    b.Navigation("TicketPurchases");

                    b.Navigation("UserPoiInteractions");

                    b.Navigation("UserVerifications");
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserDetail", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("skiCentar.Services.Database.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
